%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: ibd_coeff.dvi
%%BoundingBox: 60 268 549 593
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o docfig1.eps ibd_coeff
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.10.28:1313
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (ibd_coeff.dvi)
@start
%DVIPSBitmapFont: Fa lcmss8 12 9
/Fa 9 58 df<140F4A7E143F14FF1303131F0007B5FC127FB6FCA25BEA7FF0EA3C00C7FC
B3B3AD003FB612FE4815FFA46C15FE284475C33E>49 D<EC3FFC0103B512C0010F14F801
3F14FE496E7E48B77E488248D9C01F7F270FFE00017F01F86D6C7E4848EC1FFE48481407
496E7E485A70138048C9FCA248EE7FC0127E123C121C120CCAFCA4EFFF80A34C1300A24C
5A16075F4C5A4C5A4C5A4C5A4C5A4B90C7FCED07FE4B5A4B5AED7FE04B5A4A5B4A48C8FC
EC0FFCEC1FF04A5A4A5A4948C9FC495A495A495AEB1FE0EB7FC0495A4848CAFC485AEA0F
F848B812804817C05AA37E6C178032447BC33E>I<EC0FFF91B512F0010714FC011F14FF
017F8190B712E048820007D9F8037F489039C0007FFC4848C7121FD83FF8EC07FE491403
6C4881D80F80806CC8FC1202C9FCA35E5F16075F160F4C5AEE7FF04C5A03075B92B55A49
B6C7FC5E16F85E16FE707E90C700037F9238007FF0EE1FF8707E707E707E701380A27013
C0A218E0177FA617FF002017C01278007C5D00FE17806C5D01C04A130001F05CD83FFC4A
5A6CB4EC7FFC6C9039F003FFF86C90B65A00015E6C1680013F92C7FC010F14FC010114E0
D9001F90C8FC33467BC33E>I<EEFF804B7F5DA25D5D5D16BF153FED7F3F15FF15FEEC01
FC1403EC07F815F0140FEC1FE0EC3FC0A2EC7F80ECFF005B5C495A495A130F5C495A133F
495A5C49C7FC5A485A5B485A120F485A5B485A127F485A90B812FC18FEA56C17FCC9383F
C000B0705A37437DC23E>I<48B712F848825AA45F01F8CAFCB0EC07FF027F13F001F9B5
12FC90B7FC8383DAFC037F9139C0007FF091C7EA1FF8496E7E01F86E7EA26C486E7E6C5A
C96C1380A37013C0A95E1880120C001C5D003E1700007F5D486C5D6D140F01F04A5A6C6C
EC7FF86CB449485A6CD9E00F5B000790B65A6C5E6C4BC7FC6C6C5C011F14F00103148090
26003FF8C8FC32447BC13E>I<ED3FFC0203B512C0020F14F0143F91B6FC13035B49EBE0
074990C71270D93FF891C7FC495AEBFFC0485B91CAFC485A485AA2485AA2485AA2485AA2
15183A7FC007FFE0021F13F8027F13FE01C1B6FC48488101878190268FF0017F903A9F80
007FF001BFC7EA1FF801FC140F496E7E83491403496E7EA25BA2701380A25B127FA27FA4
123F7F4C1300121F7F4C5A6C7E4C5A6C6C140F6C6C4A5A6D4A5A6C01C0EBFFE06CD9F807
5B6DB65A6D92C7FC6D5C6D5C010314F0010014C0DA1FFCC8FC31467AC33E>I<007FB812
C0B912E0A56C1780C9000113004C5A4C5A4C5A4C5A4C5A4C5A4C5A5D94C7FC4B5A4B5A4B
5AA24B5A4B5AA24B5A4B5AA24A90C8FCA24A5AA24A5AA24A5AA34A5AA24A5AA34A5AA314
FF5DA44990C9FCA65B5CAA6D5A33437BC13E>I<EC0FFE91B512E0010314F8010F14FE01
3F6E7E498148B712F048D9E0007F91C7121FD807FCEC07FCD80FF0EC01FE491400001F82
4981003F178049153FA66C6CED7F00A26D5D000F5E6C6C4A5AD803FCEC07F86C6C4A5A26
00FFC0EB7FE0013FB61280010F4AC7FC010314F8010014E0010714FC011F14FF90267FFE
0F13C0903AFFC0007FE0000390C7EA1FF8D807FCEC07FC48486E7E48486E7E4980003F17
804848ED7FC0A249153F00FF17E0A76C6CED7FC0A36C6CEDFF80A26C6C4A13006D5CD80F
FEEC0FFE6C6C6CEB3FFC6C9039F001FFF86C90B65A6C5E013F15806D92C7FC010714FC01
0014E0DA0FFEC8FC33467BC33E>I<EC1FFC91B57E010714E04914F8013F80498090B7FC
48D9F0077F48D980017F4848C76C7E48486E7E4848141F496E7E4848140783485A160383
485A160183A4821880A25EA26C7EA25EA26C6C5C6D5C121F6C6C5C6D147E6CB45C6C9038
C007F86C90B55A6C5D6D02C113006D1401010F13FC010313F09026000C005B91C71203A2
5F1607A24C5AA24C5A4C5AA24C5A00024B5A00071403D80FC04990C7FC01F0EB1FFE3A1F
FE01FFFC90B65A16E000075D6C92C8FCC65C013F13F00107138031467AC33E>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi8 16.59 1
/Fb 1 84 df<942603FFC01460053F01FC14F04CB6EA800104079238E003E0041FEDF007
933B7FFE007FF80FDCFFF090380FFC1F4B0180D901FE13C0DB07FEC8EA7F3F4B48ED3FFF
DB1FF0814B486F13804B48814B5A4A90C97E4B180014034A48825D020F605D021F1700A2
023F605DA3027F60A36F1601631A006F94C7FCA281816E7E16C016F06E13FF17F06E14FF
18F06E15FF6E16E06E16F86E826F15FF031F82030782030182ED001F040181DC001F8017
01DD001F7F180384726C7E193FA2191F190FA3190713F01201A21203625BA20007180F62
A262000F181FA26D4D5A62001F187F6D4D5A97C8FC6D5E003F4D5A6D4C5A6D4C5A6E4B5A
486DED7FE0D9DFF04B5AD98FFC020390C9FC902607FF80EB0FFED8FE0101FCEBFFFC486C
90B612F048013F15C0020F92CAFC48010114F848D9000F1380546478E059>83
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi8 10 4
/Fc 4 117 df<163FED1FFFA3ED007F167EA216FEA216FCA21501A216F8A21503A216F0
A21507A2027E13E0903803FF87010F13CF90381F81EF90397F00FFC001FC137F485A0003
143F484814805B120F485A1600485A5D127F90C7127EA215FE5A485CA21401A248ECF80E
A21403161E913807F01CA2007E010F133C021F1338003E013F1378003F01F913703A1F83
F1F8F03A0FFFC0FFE000039038807FC03A00FC001F00283B7CB92D>100
D<D801F0EB1FC0D807FCEBFFF0260FFE0313FC3A1E3F07C0FE3A1C1F1F007F003C01BE7F
003813F80078497F12705C00F0495BEAE03F5C91C7FC00005D49147E137EA216FE01FE5C
5B15015E1201490103130E16F00307131E0003EDE01C5B173C92380FC038000716784901
0713F0EEC1E016E3000F913803FFC0496D1300D80380EB007C2F267DA436>110
D<EC7F80903801FFE0010713F890381FC07C90383F001E133E49137E01FC13FE5BA30001
14786D13007F3800FFE014FEECFF806D13E06D13F0010F13F813019038000FFC14031401
001E1300127FA24814F8A348EB01F000F8EB03E0481307007CEB0FC0003FEB7F00381FFF
FE000713F8C613C01F267CA429>115 D<14E0497E1303A413075CA3130F5CA3131F5C00
7FB512E0A2B6FCD8003FC7FCA35B137EA313FE5BA312015BA312035BA312079038E001C0
A21403000F1480EBC007EC0F00140E141E5C00075BEBE1F06CB45A6C1380D8007EC7FC1B
357FB320>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd lcmss8 13.82 16
/Fd 16 119 df<EC01F014034A7E140F143F14FF130748B5FC123F5AB6FCA26C139FEBFC
1FEA1F00C7FCB3B3B3A2001FB712F84816FC4816FEA36C16FC6C16F82F4E73CD48>49
D<913807FFE0027F13FE0103B612C0010F15F04915FC4915FF90B87E488348D9F8018048
9026C0000F7F91C700037FD80FFC02007F4848ED3FFE49151F003F707E498148486F1380
A248488119C06CCAFC7E121E120E1206CBFCA45F1980A25F19005F604D5A171F604D5A4D
5A4D5A4C5B4C90C7FC4C5AEE1FFC4C5A4C5AEEFFC003035B4B90C8FCED0FFCED3FF84B5A
EDFFC002035B4A48C9FC4A5A4A5AEC7FE04A5A495B4990CAFCEB07FCEB1FF8495AEB7FC0
495A000390CBFCEA07FC48B912805A007F18C0A46C18807E3A4E7ACD48>I<EC3FFF0107
B512E0013F14FC48B67E00076F7E48824882DAC0007F01FCC7EA3FF801F0141F01C06E7E
90C86C7E001C1503C97F82A2188082AA033FB5FC0207B6FC147F0103B7FC010F49C6FC01
3F13C0D9FFFCC7FC4813E0000713804848C8FC485A5B485A485A5B12FF5BA45EA26D5CA2
6C6C5C6D141F6C6C5C01FEEB01FE3A1FFFE00FFC6C90B55A5E6C5D000115806C9139FE00
7F00013F13F0010F90C9FC313F79BD44>97 D<EF03F8A2EF07FCB1EC03FF021F13F0027F
13FC49B512FE010714FF4915874915E749EBE01F903A7FFE0007F7D9FFF8EB01FF4801E0
EB007F480180143F4890C8FC49151F4848150FA2484815075B123F5BA2127F5BA312FF5B
AB6C7EA47F123F7F001F160F7F171F6C7E6C6C153F6D157F6C6D14FF6C6D5B02F0EB03F7
6C01FCEB0FE7903A7FFF807FC76D90B512876D1507010714FE6D14FC01009138F003F802
3F13C0DA07FEC8FC36517ACF48>100 D<913803FF80021F13F0027F13FE49B67E010781
4915F049814901007FD97FF8EB1FFED9FFE0130748496D7E48490100138091C8127F4848
16C04848153F49ED1FE0485AA24848ED0FF0A34848150718F8A25B12FF1703A390B8FCA3
18F0A20180CAFCA4127F7FA36C7EA27F121F7F6C6C1630000717F06D15016C6C15036C6D
140F02E0141F6C6D147FD97FFCEB03FF90273FFF803F13C06D90B61280010716006D15FC
010015F0023F14C0020791C7FC020013F0353F7ABD40>I<92381FFFC04AB512FC140714
1F5C5C91B6FC49EBF00349903880003C4948C8FC14F8130FAA003FB612F05AB77EA36C5D
A226000FF8C8FCB3B3AF6D5A13032E517DD02C>I<913A01FF8003F8021F13F0027F9038
F807FC49B512FE4914FF010F15874915C7499038E03FE749EB0007D9FFF8EB03F74849EB
00FF4801C0147F5C4890C8123F485A49151F121F49150F485A17075B127FA25BA212FF5B
A96D150FA2127FA26D151FA26C7E173F6C7E6D157F6C7E6D15F76C6D13016C6DEB03E76C
01F013076C01FCEB1FC7903A7FFF807F876D90B512076D14FE6D14FC010314F8010014F0
023F13C0913807FE0091C8FCA318F8A2170F18F0171FA20006EE3FE0D80FC0EDFFC001F8
4A138001FF140702F8013F130091B65A5F6C16F06C5ED8003F158001034AC7FCD9000F13
E036507ABC48>I<EA7F80EAFFC013E0A713C0EA7F80C7FCAAEA1F80123FEA7FC0B3B3B3
A2EA3F80121F0B5176D020>105 D<123F5AEAFF80B3B3B3B3A4EA7F007E095075CF20>
108 D<DBFFE0EDFFE0003F010701FE020713FE48011F6D6C011F6D7E26FF807F6E017F80
91B600F090B612F001816F488101835E902687FC019027FC07FC017F903F8FE0003FFE0F
E0003FFED99F80010FD91F80130F01BFC76C6C48C76C7E01BE6E013E8001FC5E496E496E
1380495EA2496E4980A2495EA3495EB3B3A26CC96CC9EA7F006C7082593D75BC70>I<ED
FFE0003F010713FE48011F6D7E26FF807F8091B612F00181811383902687FC017F903A8F
E0003FFED99F80130F01BFC76C7E01BE8013FC496E13805BA24980A25BA35BB3B3A26CC9
EA7F007E313D75BC48>I<ED7FF00207B5FC021F14C0027F14F049B612FC010715FF4982
49D9C01F7F90273FFC00017FD97FF06D6C7ED9FFC0EC1FF848496E7E4890C86C7E491503
48486F7E48486F138049167F001F18C049163F003F18E0A249161F007F18F0A349160F00
FF18F8AB6D161F007F18F0A46C6CEE3FE0A26C6CEE7FC0A26D16FF000F18806C6C4B1300
6D5D6C6C4B5A6C6D4A5A6C6D4A5A02F0147FD97FFC49485A90271FFFC01F13C06D90B65A
6D93C7FC010115FC6D5D023F14E0020791C8FC9138007FF03D3F7BBD48>I<ED1FC0003E
14FF007E1303B4130F5C147F91B5FC5B49EBF0004990C7FCEB0FFC14F0EB1FC0495A91C8
FC137E137C5BA25BA25BA25BA35BB3AF6CC9FC7E223D75BC30>114
D<EC7FFF0107B512F0013F14FE49ECFF8048B712E04816F85A48EBC003D81FFCC7127F49
140FD83FE0EC03F01600491570007F16005BA57F7F123F13F813FE6C6C7E6C13FCECFFE0
6C14FF6C15E0C615F86D80011F14FF01071580010115C0D9000F14E0DA007F13F0030313
F8ED007FEE3FFC160F1607EE03FEA21601A512300078ED03FC127C007F1507D8FFC0EC0F
F801F0141F01FEEC7FF09039FFE007FF91B612E0003F16C0000F16800003EDFE00C66C14
F8010F14E09026007FFEC7FC2F3F7CBD37>I<003F167F5A486CEDFF80B3B3A45EA35EA2
5E6D5C5E007F153E6D14FE01F8EB03FC6CB4EB1FF891B55A6C15C06C5D6C5D000102FCEB
7F006C14E0010F90C9FC313D75BB48>117 D<007E173FB4EF7F806D16FF6D5D007F1800
7F003F4C5AA26D1507001F5F7F000F4C5AA26D151F00075F7F00034C5AA26D157F6C5F80
6C4C5AA26E5B017F93C7FC80013F4A5AA26E1307011F5D80010F4A5AA26E131F01075D80
01034A5AA26E137F6D5D15806D4A5AA281DA7FC190C8FCA291383FE3FEA215F391381FF7
FCA26EB45AA36E5BA26E5BA26E5B6E6CC9FC393C7DBB40>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
0 0 bop -233 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  347.12273 330.05112
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-233 3946 a
 tx@Dict begin tx@NodeDict begin {347.12273 330.05112 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -233 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  381.26595 330.05112
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-233 3946 a
 tx@Dict begin tx@NodeDict begin {381.26595 330.05112 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -233 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  347.12273 295.9079
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-233 3946 a
 tx@Dict begin tx@NodeDict begin {347.12273 295.9079 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -233 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  381.26595 295.9079
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-233 3946 a
 tx@Dict begin tx@NodeDict begin {381.26595 295.9079 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -233 3946 a 937 1243 a Fd(genes)47 b(from)g(1)1706
1203 y Fc(st)1830 1243 y Fd(individual)924 1530 y(genes)g(from)g(2)1693
1490 y Fc(nd)1843 1530 y Fd(individual)-185 3946 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  34.14322 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {34.14322 227.62146 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  68.28644 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {68.28644 227.62146 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  34.14322 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {34.14322 193.47824 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  68.28644 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {68.28644 193.47824 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185
3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i2 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946
a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i2 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i2 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185
3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i3 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  136.57288 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {136.57288 227.62146 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  170.7161 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {170.7161 227.62146 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  136.57288 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {136.57288 193.47824 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  170.7161 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {170.7161 193.47824 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i2 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185
3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i3 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  239.00253 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {239.00253 227.62146 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  273.14575 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {273.14575 227.62146 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  239.00253 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {239.00253 193.47824 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  273.14575 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {273.14575 193.47824 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i2 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185
3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i2 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  341.43219 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {341.43219 227.62146 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end

-185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  375.57541 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185
3946 a
 tx@Dict begin tx@NodeDict begin {375.57541 227.62146 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  341.43219 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {341.43219 193.47824 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  375.57541 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {375.57541 193.47824 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i2 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  443.86185 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {443.86185 227.62146 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  478.00507 227.62146
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {478.00507 227.62146 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  443.86185 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {443.86185 193.47824 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  478.00507 193.47824
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {478.00507 193.47824 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185
3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946
a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i3 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  34.14322 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {34.14322 102.42966 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  68.28644 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {68.28644 102.42966 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  34.14322 68.28644 2.84526
.5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {34.14322 68.28644 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  68.28644 68.28644 2.84526
.5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {68.28644 68.28644 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i3 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  136.57288 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {136.57288 102.42966 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  170.7161 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {170.7161 102.42966 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  136.57288 68.28644
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {136.57288 68.28644 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  170.7161 68.28644 2.84526
.5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {170.7161 68.28644 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185
3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a -185 3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i2 /N@i4 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  239.00253 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {239.00253 102.42966 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  273.14575 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {273.14575 102.42966 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  239.00253 68.28644
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {239.00253 68.28644 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  273.14575 68.28644
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial -185 3946 a
 tx@Dict begin tx@NodeDict begin {273.14575 68.28644 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a -185
3946 a
 tx@Dict begin gsave STV newpath 0.75 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@i1 /N@i3 InitNC { NCLine  } if end gsave 0.5 setgray fill
grestore gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  341.43219 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {341.43219 102.42966 2.84526 } false
/N@i1 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  375.57541 102.42966
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0. setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {375.57541 102.42966 2.84526 } false
/N@i2 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  341.43219 68.28644
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {341.43219 68.28644 2.84526 } false
/N@i3 11 {InitCnode } NewNode end end
 -185 3946 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.75 SLW 0. setgray  375.57541 68.28644
2.84526 .5 CLW mul sub 0 360 arc closepath gsave 0.5 setgray fill grestore
gsave 0.75 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
-185 3946 a
 tx@Dict begin tx@NodeDict begin {375.57541 68.28644 2.84526 } false
/N@i4 11 {InitCnode } NewNode end end
 -185 3946 a 162 2614 a Fb(S)251 2632 y Fa(1)1013
2614 y Fb(S)1102 2632 y Fa(2)1863 2614 y Fb(S)1952 2632
y Fa(3)2713 2614 y Fb(S)2802 2632 y Fa(4)3564 2614 y
Fb(S)3653 2632 y Fa(5)162 3653 y Fb(S)251 3671 y Fa(6)1013
3653 y Fb(S)1102 3671 y Fa(7)1863 3653 y Fb(S)1952 3671
y Fa(8)2713 3653 y Fb(S)2802 3671 y Fa(9)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
