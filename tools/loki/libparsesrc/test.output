Grammar

    0 $accept: clause $end

    1 clause: /* empty */
    2       | atom
    3       | clause ',' atom
    4       | int '(' clause ')'
    5       | '(' clause ')'

    6 atom: int
    7     | 'x'
    8     | int 'x'

    9 int: DIGIT
   10    | int DIGIT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 5
')' (41) 4 5
',' (44) 3
'x' (120) 7 8
error (256)
DIGIT (258) 9 10


Nonterminals, with rules where they appear

$accept (8)
    on left: 0
clause (9)
    on left: 1 2 3 4 5, on right: 0 3 4 5
atom (10)
    on left: 6 7 8, on right: 2 3
int (11)
    on left: 9 10, on right: 4 6 8 10


state 0

    0 $accept: . clause $end
    1 clause: .
    2       | . atom
    3       | . clause ',' atom
    4       | . int '(' clause ')'
    5       | . '(' clause ')'
    6 atom: . int
    7     | . 'x'
    8     | . int 'x'
    9 int: . DIGIT
   10    | . int DIGIT

    DIGIT  shift, and go to state 1
    '('    shift, and go to state 2
    'x'    shift, and go to state 3

    $default  reduce using rule 1 (clause)

    clause  go to state 4
    atom    go to state 5
    int     go to state 6


state 1

    9 int: DIGIT .

    $default  reduce using rule 9 (int)


state 2

    1 clause: .
    2       | . atom
    3       | . clause ',' atom
    4       | . int '(' clause ')'
    5       | . '(' clause ')'
    5       | '(' . clause ')'
    6 atom: . int
    7     | . 'x'
    8     | . int 'x'
    9 int: . DIGIT
   10    | . int DIGIT

    DIGIT  shift, and go to state 1
    '('    shift, and go to state 2
    'x'    shift, and go to state 3

    $default  reduce using rule 1 (clause)

    clause  go to state 7
    atom    go to state 5
    int     go to state 6


state 3

    7 atom: 'x' .

    $default  reduce using rule 7 (atom)


state 4

    0 $accept: clause . $end
    3 clause: clause . ',' atom

    $end  shift, and go to state 8
    ','   shift, and go to state 9


state 5

    2 clause: atom .

    $default  reduce using rule 2 (clause)


state 6

    4 clause: int . '(' clause ')'
    6 atom: int .
    8     | int . 'x'
   10 int: int . DIGIT

    DIGIT  shift, and go to state 10
    '('    shift, and go to state 11
    'x'    shift, and go to state 12

    $default  reduce using rule 6 (atom)


state 7

    3 clause: clause . ',' atom
    5       | '(' clause . ')'

    ','  shift, and go to state 9
    ')'  shift, and go to state 13


state 8

    0 $accept: clause $end .

    $default  accept


state 9

    3 clause: clause ',' . atom
    6 atom: . int
    7     | . 'x'
    8     | . int 'x'
    9 int: . DIGIT
   10    | . int DIGIT

    DIGIT  shift, and go to state 1
    'x'    shift, and go to state 3

    atom  go to state 14
    int   go to state 15


state 10

   10 int: int DIGIT .

    $default  reduce using rule 10 (int)


state 11

    1 clause: .
    2       | . atom
    3       | . clause ',' atom
    4       | . int '(' clause ')'
    4       | int '(' . clause ')'
    5       | . '(' clause ')'
    6 atom: . int
    7     | . 'x'
    8     | . int 'x'
    9 int: . DIGIT
   10    | . int DIGIT

    DIGIT  shift, and go to state 1
    '('    shift, and go to state 2
    'x'    shift, and go to state 3

    $default  reduce using rule 1 (clause)

    clause  go to state 16
    atom    go to state 5
    int     go to state 6


state 12

    8 atom: int 'x' .

    $default  reduce using rule 8 (atom)


state 13

    5 clause: '(' clause ')' .

    $default  reduce using rule 5 (clause)


state 14

    3 clause: clause ',' atom .

    $default  reduce using rule 3 (clause)


state 15

    6 atom: int .
    8     | int . 'x'
   10 int: int . DIGIT

    DIGIT  shift, and go to state 10
    'x'    shift, and go to state 12

    $default  reduce using rule 6 (atom)


state 16

    3 clause: clause . ',' atom
    4       | int '(' clause . ')'

    ','  shift, and go to state 9
    ')'  shift, and go to state 17


state 17

    4 clause: int '(' clause ')' .

    $default  reduce using rule 4 (clause)
