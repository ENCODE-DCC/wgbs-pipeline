/****************************************************************************
 *                                                                          *
 *     Loki - Programs for genetic analysis of complex traits using MCMC    *
 *                                                                          *
 *                     Simon Heath - CNG, Evry                              *
 *                                                                          *
 *                         February 2003                                    *
 *                                                                          *
 * init_marker.c:                                                           *
 *                                                                          *
 * Copyright (C) Simon C. Heath 2003                                        *
 * This is free software.  You can distribute it and/or modify it           *
 * under the terms of the Modified BSD license, see the file COPYING        *
 *                                                                          *
 ****************************************************************************/

#include <config.h>
#include <stdlib.h>
#ifdef USE_DMALLOC
#include <dmalloc.h>
#endif
#include <stdio.h>
#include <math.h>
#include <float.h>
#ifdef HAVE_LIMITS_H
#include <limits.h>
#endif
#include <assert.h>

#include "utils.h"
#include "loki.h"
#include "loki_peel.h"
#include "loki_utils.h"
#include "lk_malloc.h"
#include "locus.h"

static char *sexstr[2]={"female","male"};

static double kosambi_to_haldane(double x)
{
  return x+50.0*log(cosh(.02*x));
}

void alloc_locus(struct Locus *loc,struct loki *loki)
{
  int i,n_all,n_gen;
  int ped_size;
	
  n_gen=loki->pedigree->n_genetic_groups;
  ped_size=loki->pedigree->ped_size;
  loc->pos[0]=loc->pos[1]=0.0;
  loc->variance=loc->aff_freq=loc->diff_freq=0;
  /* Storage for sampled genotypes */
  loc->gt=lk_malloc(sizeof(int)*3*ped_size);
  /* Storage for founder genes */
  loc->genes[0]=loc->gt+ped_size;
  loc->genes[1]=loc->genes[0]+ped_size;
  /* Segregation indicators */
  loc->seg[0]=lk_malloc(sizeof(int)*4*ped_size);
  loc->seg[1]=loc->seg[0]+ped_size;
  loc->seg_bk[0]=loc->seg[1]+ped_size;
  loc->seg_bk[1]=loc->seg_bk[0]+ped_size;
  n_all=loc->n_alleles;
  if(!n_all) loc->freq=0;
  else {
    loc->freq=lk_malloc(sizeof(void *)*n_gen);
    loc->freq[0]=lk_malloc(sizeof(double)*n_gen*n_all);
    for(i=0;i<n_gen*n_all;i++) loc->freq[0][i]=0.0;
    for(i=1;i<n_gen;i++) loc->freq[i]=loc->freq[i-1]+n_all;
  }
  loc->lk_store=lk_malloc(sizeof(double)*loki->pedigree->n_comp);
}

void free_locus(struct Locus *loc) 
{
  if(loc->gt) free(loc->gt);
  if(loc->seg[0]) free(loc->seg[0]);
  if(loc->pruned_flag) free(loc->pruned_flag);
  if(loc->freq) {
    if(loc->freq[0]) free(loc->freq[0]);
    free(loc->freq);
  }
  if(loc->lk_store) free(loc->lk_store);
}

void alloc_marker(int x,struct loki *loki)
{
  int i,ped_size,n_gen,n_all,mk_nrec;
  struct Id_Record *id_array;
  struct Marker *mark;
	
  id_array=loki->pedigree->id_array;
  ped_size=loki->pedigree->ped_size;
  mk_nrec=loki->markers->n_id_recs;
  assert(mk_nrec);
  n_gen=loki->pedigree->n_genetic_groups;
  mark=loki->markers->marker+x;
  if(loki->models->n_models) {
    mark->mterm=lk_malloc(sizeof(void *)*loki->models->n_models);
    for(i=0;i<loki->models->n_models;i++) mark->mterm[i]=0;
  } else mark->mterm=0;
  mark->locus.link_group=-1;
  mark->counts=0;
  mark->pos_set=0;
  mark->locus.type=ST_MARKER;
  mark->locus.index=x;
  mark->locus.name=mark->name;
  alloc_locus(&mark->locus,loki);
  if(mark->parent) {
    mark->locus.pruned_flag=mark->locus.founder_flag=0;
  } else {
    /* Pruning stuff */
    mark->locus.pruned_flag=lk_malloc(sizeof(int)*2*ped_size);
    mark->locus.founder_flag=mark->locus.pruned_flag+ped_size;
  }
  /* Haplotype data */
  if(mark->n_children) mark->haplo=0;
  else {
    mark->haplo=lk_calloc((size_t)ped_size,sizeof(int));
    mark->orig_gt=lk_calloc((size_t)mk_nrec,sizeof(int));
  }
  /* For meiosis sampler - determines if meiosis is fixed or not */
  mark->m_flag=lk_malloc(sizeof(int)*ped_size);
  /* Allele counts per component */
  mark->n_all1=lk_malloc(sizeof(int)*loki->pedigree->n_comp);
  n_all=mark->locus.n_alleles;
  mark->temp[0]=0;
  mark->all_set=0;
  mark->req_set[0]=0;
  mark->nhaps[0]=0;
  assert(!(n_all && mark->n_children));
  mark->freq_set=0;
  mark->count_flag=0;
  mark->gtypes=0;
  mark->ngens=0;
  mark->allele_trans=0;
  if(n_all) {
    if(!mark->parent) {
      mark->freq_set=lk_malloc(sizeof(void *)*n_gen);
      mark->count_flag=lk_calloc((size_t)n_gen,sizeof(int));
      mark->freq_set[0]=lk_malloc(sizeof(char)*n_gen*n_all);
      for(i=0;i<n_gen*n_all;i++) mark->freq_set[0][i]=0;
      for(i=1;i<n_gen;i++) mark->freq_set[i]=mark->freq_set[i-1]+n_all;
    }
    mark->allele_trans=lk_malloc(sizeof(void *)*loki->pedigree->n_comp);
    mark->allele_trans[0]=lk_malloc(sizeof(int)*loki->pedigree->n_comp*n_all);
    for(i=1;i<loki->pedigree->n_comp;i++) mark->allele_trans[i]=mark->allele_trans[i-1]+n_all;
  }
  if((n_all && !mark->parent) || mark->n_children) {
    mark->ngens=lk_malloc(sizeof(int)*ped_size);
    mark->gtypes=lk_malloc(sizeof(void *)*ped_size);
    for(i=0;i<ped_size;i++) mark->gtypes[i]=0;
  }
}

void free_marker_data(struct Marker *mark)
{
  if(mark->req_set[0]) free(mark->req_set[0]);
  if(mark->all_set) {
    if(mark->all_set[0]) free(mark->all_set[0]);
    free(mark->all_set);
  }
  if(mark->recode) free(mark->recode);
  if(mark->nhaps[0]) free(mark->nhaps[0]);
  if(mark->temp[0]) free(mark->temp[0]);
}

void free_marker(struct Marker *mark,int ped_size) 
{
  int i;
	
  free_locus(&mark->locus);
  if(mark->haplo) free(mark->haplo);
  if(mark->m_flag) free(mark->m_flag);
  if(mark->freq_set) {
    if(mark->freq_set[0]) free(mark->freq_set[0]);
    free(mark->freq_set);
  }
  if(mark->mterm) free(mark->mterm);
  if(mark->n_all1) free(mark->n_all1);
  if(mark->counts) free(mark->counts);
  if(mark->count_flag) free(mark->count_flag);
  if(mark->ngens) free(mark->ngens);
  if(mark->gtypes) {
    for(i=0;i<ped_size;i++) if(mark->gtypes[i]) free(mark->gtypes[i]);
    free(mark->gtypes);
  }
  if(mark->allele_trans) {
    if(mark->allele_trans[0]) free(mark->allele_trans[0]);
    free(mark->allele_trans);
  }
  free_marker_data(mark);
}

static void init_marker_freq(struct Marker *mark,struct loki *loki)
{
  int i,j,a1,a2,grp,k,n_gen,n_all;
  double *tp,p,z;
	
  n_gen=loki->pedigree->n_genetic_groups;
  n_all=mark->locus.n_alleles;

  /* Allocate space for allele counts data if present */
  for(k=grp=0;grp<n_gen;grp++) if(mark->count_flag[grp]) k++;
  if(k) {
    mark->counts=lk_malloc(sizeof(void *)*n_gen);
    tp=lk_malloc(sizeof(double)*k*n_all);
    loki->sys.RemBlock=AddRemem(tp,loki->sys.RemBlock);
    for(grp=0;grp<n_gen;grp++) {
      if(mark->count_flag[grp]) {
	mark->counts[grp]=tp;
	tp+=n_all;
      } else mark->counts[grp]=0;
    }
  }
  /* Check allele frequencies etc. */
  for(grp=0;grp<n_gen;grp++) {
    if(mark->count_flag[grp]) { /* Allele counts for this group - copy observed counts from freq. array */
      z=1.0/(double)n_all;
      for(p=0.0,i=0;i<n_all;i++) {
	if(mark->freq_set[grp][i]) mark->counts[grp][i]=mark->locus.freq[grp][i]+z;
	else mark->counts[grp][i]=z; /* Unobserved allele, assign prior */
	p+=mark->counts[grp][i];
      }
      for(i=0;i<n_all;i++) {
	mark->locus.freq[grp][i]=mark->counts[grp][i]/p;
	mark->freq_set[grp][i]=0;
      }
    } else { /* Check frequency data */
      for(p=0.0,i=0;i<n_all;i++) {
	if(!mark->freq_set[grp][i]) mark->locus.freq[grp][i]=0.1;
	p+=mark->locus.freq[grp][i];
      }
      if(fabs(p-1.0)>0.001) {
	for(i=k=0;i<n_all;i++) if(!mark->freq_set[grp][i]) k++;
	if(k<i) { /* Some alleles set */
	  if(p<1.0) {
	    z=(1.0-p)/(double)k;
	    for(i=0;i<n_all;i++) if(!mark->freq_set[grp][i]) mark->locus.freq[grp][i]=z;
	  } else {
	    if(check_output(WARN_MSG)) {
	      (void)fputs("Rescaling frequencies for marker ",stdout);
	      print_marker_name(stdout,mark->locus.index);
	      if(loki->pedigree->group_recode.recode) {
		(void)fputs(" in genetic group ",stdout);
		if(loki->pedigree->group_recode.flag==ST_STRING) (void)fputs(loki->pedigree->group_recode.recode[grp].string,stdout);
		else (void)printf("%d",loki->pedigree->group_recode.recode[grp].value);
	      }
	      (void)fputc('\n',stdout);
	    }
	    for(i=0;i<n_all;i++) mark->locus.freq[grp][i]/=p;
	  }
	} else { /* No alleles set - get rough estimate from counts */
	  z=1.0/(double)n_all;
	  for(i=0;i<n_all;i++) mark->locus.freq[grp][i]=z;
	  for(i=0;i<loki->pedigree->ped_size;i++) {
	    if(n_gen==1 || loki->pedigree->id_array[i].group-1==grp) {
	      j=mark->haplo[i];
	      if(j) {
		a1=(int)(sqrt(.25+2.0*(double)j)-.49999);
		a2=j-(a1*(a1+1)/2);
		assert(a1 && a2);
		mark->locus.freq[grp][a1-1]++;
		mark->locus.freq[grp][a2-1]++;
	      }
	    }
	  }
	  for(z=0.0,i=0;i<n_all;i++) z+=mark->locus.freq[grp][i];
	  z=1.0/z;
	  for(i=0;i<n_all;i++) mark->locus.freq[grp][i]*=z;
	}
      }
    }
  }
}

static void marker_outside_error(struct Locus *loc,int k,const struct loki *loki)
{
  int i;

  i=loc->link_group;
  (void)fputs("Marker",stderr);
  print_marker_name(stderr,loc->index);
  if(loki->markers->sex_map) (void)fprintf(stderr," located outside of %s linkage group '%s'\n",sexstr[k],loki->markers->linkage[i].name);
  else (void)fprintf(stderr," located outside of linkage group '%s'\n",loki->markers->linkage[i].name);
}

static int init_maps(struct loki *loki)
{
  int i,j,k,k2,n_links,er=0,fx;
  struct Marker *mark;
  struct Link *linkage;
  struct Locus **locilist,*loc,*loc1;
  double x,xx,min,max;
	
  n_links=loki->markers->n_links;
  if(n_links) message(DEBUG_MSG,"Initializing genetic maps\n");
  linkage=loki->markers->linkage;
  mark=loki->markers->marker;
  for(i=0;i<loki->markers->n_markers;i++,mark++) {
    if(!mark->pos_set) {
      er=1;
      (void)fputs("Position not set for marker ",stderr);
      print_marker_name(stderr,i);
      (void)fputc('\n',stderr);
    }
  }
  for(j=k=0;k<n_links;k++) if(linkage[k].n_markers>j) j=linkage[k].n_markers;
  if(!er && j) {
    locilist=lk_malloc(sizeof(void *)*j);
    for(i=0;i<n_links;i++) {
      get_locuslist(locilist,i,&j,1);
      set_sort_sex(0);
      gnu_qsort(locilist,(size_t)j,(size_t)sizeof(void *),cmp_loci);
      /* Check for zero recombination between markers and for different male and female maps */
      for(k=1;k<j;k++) {
	for(k2=0;k2<=loki->markers->sex_map;k2++) {
	  if(locilist[k-1]->pos[k2]>=locilist[k]->pos[k2]) {
	    if(locilist[k-1]->pos[k2]==locilist[k]->pos[k2]) {
	      fputs("Zero",stderr);
	      if(loki->markers->sex_map) fputs(k2?" male":" female",stderr);
	      fprintf(stderr," recombination between markers ");
	    } else {
	      if(!k2) ABT_FUNC("Internal error - bad map sort\n");
	      fputs("Male and female maps have different order for markers ",stderr);
	    }
	    print_marker_name(stderr,locilist[k-1]->index);
	    fputs(" and ",stderr);
	    print_marker_name(stderr,locilist[k]->index);
	    fputc('\n',stderr);
	    er=1;
	  }
	}
      }
      if(er) continue;
      /* Convert from input Kosambi map to Haldane map (if necessary) */
      if(loki->params.map_function==MAP_KOSAMBI) {
	for(k2=0;k2<=loki->markers->sex_map;k2++) {
	  loc1=locilist[0];
	  xx=loc1->pos[k2];
	  if(linkage[i].range_set[k2]) {
	    x=xx-linkage[i].r1[k2];
	    if(x<0.0) {
	      marker_outside_error(loc1,k2,loki);
	      er=1;
	    } else loc1->pos[k2]=linkage[i].r1[k2]+kosambi_to_haldane(x);
	  }
	  for(k=1;k<j;k++) {
	    loc=locilist[k];
	    x=kosambi_to_haldane(loc->pos[k2]-xx);
	    x+=loc1->pos[k2];
	    xx=loc->pos[k2];
	    loc->pos[k2]=x;
	    loc1=loc;
	  }
	  if(linkage[i].range_set[k2]) {
	    x=linkage[i].r2[k2]-xx;
	    if(x<0.0) {
	      marker_outside_error(loc1,k2,loki);
	      er=1;
	    } else linkage[i].r2[k2]=loc1->pos[k2]+kosambi_to_haldane(x);
	  }
	}
	if(!loki->markers->sex_map) {
	  for(k=0;k<j;k++) locilist[k]->pos[1]=locilist[k]->pos[0];
	  linkage[i].r1[1]=linkage[i].r1[0];
	  linkage[i].r2[1]=linkage[i].r2[0];
	}
      }
    }
    free(locilist);
  }
  if(!er) {
    for(i=0;i<loki->markers->n_links;i++) {
      mark=loki->markers->marker;
      linkage[i].sample_pos=0;
      fx=0;
      for(j=0;j<loki->markers->n_markers;j++) if(mark[j].locus.link_group==i) {
	if(mark[j].pos_set==2) {
	  loki->markers->linkage[i].sample_pos=1;
	  break;
	}
      }
      for(k=0;k<1+loki->markers->sex_map;k++) {
	if(!linkage[i].range_set[k]) {
	  min=DBL_MAX;
	  max=-DBL_MAX;
	  for(j=0;j<loki->markers->n_markers;j++) if(mark[j].locus.link_group==i) {
	    if(mark[j].pos_set==1) fx=1;
	    if(mark[j].locus.pos[k]<min) min=mark[j].locus.pos[k];
	    if(mark[j].locus.pos[k]>max) max=mark[j].locus.pos[k];
	  }
	  if(min==DBL_MAX) min=max=0.0;
	  linkage[i].r1[k]=min;
	  linkage[i].r2[k]=max;
	  if(loki->markers->sex_map) message(INFO_MSG,"Map range (%s) ",sexstr[k]);
	  else {
	    message(INFO_MSG,"Map range ");
	    linkage[i].r1[1]=linkage[i].r1[0];
	    linkage[i].r2[1]=linkage[i].r2[0];
	  }
	  if(linkage[i].name) message(INFO_MSG,"for linkage group '%s' set to %g-%gcM\n",linkage[i].name,linkage[i].r1[k],linkage[i].r2[k]);
	  else message(INFO_MSG,"for un-named linkage group set to %g-%gcM\n",linkage[i].r1[k],linkage[i].r2[k]);
	} else {
	  for(j=0;j<loki->markers->n_markers;j++) if(mark[j].locus.link_group==i) {
	    if(mark[j].pos_set==1) fx=1;
	    k2=0;
	    if(mark[j].locus.pos[k]<linkage[i].r1[k]) k2=1;
	    if(mark[j].locus.pos[k]>linkage[i].r2[k]) k2=1;
	    if(k2) {
	      marker_outside_error(&mark[j].locus,k,loki);
	      er=1;
	    }
	  }
	}
      }
      if(!fx) { /* If no marker in linkage group has a fixed position, arbitrarily fix first marker */
	min=DBL_MAX;
	k2=-1;
	for(j=0;j<loki->markers->n_markers;j++) if(mark[j].locus.link_group==i) {
	  if(mark[j].locus.pos[0]<min) {
	    min=mark[j].locus.pos[0];
	    k2=j;
	  }
	}
	if(k2>=0) {
	  mark[k2].pos_set=1;
	  if(check_output(INFO_MSG)) {
	    (void)fputs("Position for marker ",stdout);
	    print_marker_name(stdout,k2);
	    (void)printf(" fixed at %g",mark[k2].locus.pos[0]);
	    if(loki->markers->sex_map) (void)printf(",%g",mark[k2].locus.pos[1]);
	    (void)fputc('\n',stdout);
	  }
	}
      }
    }
    for(k=0;k<1+loki->markers->sex_map;k++) {
      x=0.0;
      for(i=0;i<loki->markers->n_links;i++) x+=linkage[i].r2[k]-linkage[i].r1[k];
      if(loki->markers->total_maplength[k]<0.0) {
	if(loki->markers->sex_map) message(WARN_MSG,"No total %s map length set - no unlinked loci will be allowed\n",sexstr[k]);
	else message(WARN_MSG,"No total map length set - no unlinked loci will be allowed\n");
	loki->markers->total_maplength[k]=x;
      } else if(x>=loki->markers->total_maplength[k]) {
	if(loki->markers->sex_map) message(WARN_MSG,"Total %s map length <= sum of linkage group sizes - no unlinked loci will be allowed\n",sexstr[k]);
	else message(WARN_MSG,"Total map length <= sum of linkage group sizes - no unlinked loci will be allowed\n");
	loki->markers->total_maplength[k]=x;
      }
      if(!loki->markers->sex_map) loki->markers->total_maplength[1]=loki->markers->total_maplength[0];
    }
  }
  return er;
}

void init_marker_segs(struct Marker *mark,struct loki *loki)
{
  int i,*ff;
  struct Locus *loc;
	
  loc=&mark->locus;
  ff=loc->founder_flag;
  for(i=0;i<loki->pedigree->ped_size;i++) loc->seg[0][i]=loc->seg[1][i]=ff[i]?-1:-2;
}

void Init_Markers(int noparflag,struct loki *loki)
{
  int i;
  struct Marker *marker;
	
  /* Initialize marker allele frequencies */
  marker=loki->markers->marker;
  for(i=0;i<loki->markers->n_markers;i++,marker++) {
    init_marker_freq(marker,loki);
    init_marker_segs(marker,loki);
  }
  /* Set and check linkage maps */
  if(!noparflag) if(init_maps(loki)) ABT_FUNC("Aborting\n");
}
