---
version: 2.1

defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/ENCODE-DCC/wgbs-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/ENCODE-DCC/wgbs-pipeline

py37: &py37
  docker:
    - image: circleci/python:3.7.4-stretch
  working_directory: ~/ENCODE-DCC/wgbs-pipeline

lint: &lint
  docker:
    - image: quay.io/encode-dcc/wgbs-pipeline:circleci-lint
  working_directory: ~/ENCODE-DCC/wgbs-pipeline

rust: &rust
  docker:
    - image: circleci/rust:1.40.0-stretch
  working_directory: ~/ENCODE-DCC/wgbs-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}

commands:
  run_tox:
    description: Install and run tox with a given environment
    parameters:
      toxenv:
        description: The name of the environment as per tox.ini, e.g. py37 or lint
        type: string
      extra_args:
        description: Extra arguments that are consumed only when running pytest
        type: string
        default: ''
    steps:
      - run: sudo pip install tox
      - run: tox -e << parameters.toxenv >> -- << parameters.extra_args >>

  set_environment_variables:
    description: Set docker image env vars for builds and WDL test runs
    steps:
      - run:
          command: |
            echo "export WGBS_DOCKER_IMAGE_TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
            echo "export QUAY_REPO=wgbs-pipeline" >> ${BASH_ENV}

jobs:
  lint:
    <<: *lint
    steps:
      - checkout
      - run: cat "${HOME}/.cargo/env" >> ${BASH_ENV}
      - run_tox:
          toxenv: lint
  test_py37:
    <<: *py37
    steps:
      - checkout
      - run_tox:
          toxenv: py37
  coverage-report:
    <<: *py37
    steps:
      - checkout
      - run_tox:
          toxenv: coverage-report
  test_rust:
    <<: *rust
    steps:
      - checkout
      - run: cargo test
  test_wdl:
    <<: *machine_defaults
    description: Generic testing protocol for wdl tasks
    parameters:
      tag:
        description: pytest-workflow tag, e.g. functional, integration, test_align
        type: string
      num_parallel_workflows:
        description: Max number of tests to execute in parallel
        type: integer
      resource_class:
        description: The machine resource class to run the test with
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - set_environment_variables
      - run:
          name: Run pytest-workflow WDL tests using tox
          command: |
            pyenv global 3.7.0
            pip install --upgrade pip
            pip install tox
            tox -e wdl -- --tag << parameters.tag >> --wt << parameters.num_parallel_workflows >>
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_environment_variables
      - run: *make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/${QUAY_REPO}:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/${QUAY_REPO}:template -t "${TAG}" -t quay.io/encode-dcc/${QUAY_REPO}:template -f Dockerfile .
            docker push "${TAG}"
            docker logout
          no_output_timeout: 30m

  push_template:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_environment_variables
      - run: *make_tag
      - run:
          command: |
            source ${BASH_ENV}
            docker pull "${TAG}"
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker tag "${TAG}" quay.io/encode-dcc/${QUAY_REPO}:template
            docker push quay.io/encode-dcc/${QUAY_REPO}:template
            docker logout
          no_output_timeout: 30m

# Define workflow here
workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - lint
      - coverage-report
      - test_py37:
          requires:
            - build
            - lint
      - test_rust:
          requires:
            - build
            - lint
      # TODO: add back when unit tests are added
      # - test_wdl:
      #     name: test_wdl_unit
      #     tag: unit
      #     num_parallel_workflows: 8
      #     requires:
      #       - build
      #       - lint
      - test_wdl:
          name: test_wdl_integration
          resource_class: large
          tag: integration
          num_parallel_workflows: 12
          requires:
            - build
            - lint
      - test_wdl:
          name: test_wdl_functional
          resource_class: large
          tag: functional
          num_parallel_workflows: 8
          requires:
            - build
            - lint
      - push_template:
          requires:
            - build
            - lint
            - coverage-report
            - test_py37
            - test_rust
            # TODO: add back when unit tests are added
            # - test_wdl_unit
            - test_wdl_integration
            - test_wdl_functional
          filters:
            branches:
              only:
                - dev
                - master
